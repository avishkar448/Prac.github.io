Q.1. Create RNN model and analyze the Google stock price dataset. Find out increasing or
decreasing trends of stock price for the next day. 

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM

data = pd.read_csv('Google_Stock_Price.csv')
data = data[['Open']]  # Using the "Open" column for predictions

scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(data)

look_back = 60  # Use the past 60 days to predict the next day
X_train, y_train = [], []

for i in range(look_back, len(scaled_data)):
    X_train.append(scaled_data[i-look_back:i, 0])  # Last 60 days
    y_train.append(scaled_data[i, 0])  # Target is the next day

X_train, y_train = np.array(X_train), np.array(y_train)

X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))

model = Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1)))
model.add(LSTM(units=50, return_sequences=False))
model.add(Dense(units=25))
model.add(Dense(units=1)) 

model.compile(optimizer='adam', loss='mean_squared_error')

model.fit(X_train, y_train, batch_size=32, epochs=20)

test_data = scaled_data[-look_back:]
X_test = [test_data]
X_test = np.array(X_test)
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))

predicted_price = model.predict(X_test)
predicted_price = scaler.inverse_transform(predicted_price)  

previous_day_price = data.iloc[-1, 0] 
trend = "increasing" if predicted_price[0, 0] > previous_day_price else "decreasing"

print(f"Predicted stock price for the next day: {predicted_price[0, 0]:.2f}")
print(f"Trend: The stock price is {trend}.")

plt.plot(data.values, label='Actual Prices', color='blue')
plt.axhline(y=previous_day_price, color='orange', linestyle='--', label='Last Known Price')
plt.scatter(len(data), predicted_price, color='red', label='Predicted Price')
plt.title('Google Stock Price Prediction')
plt.xlabel('Time')
plt.ylabel('Stock Price')
plt.legend()
plt.show()


Q.2. Write a python program to implement simple Linear Regression for predicting house
price.

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

data = {
    "Size (sq ft)": [750, 800, 850, 900, 950, 1000, 1050, 1100, 1150, 1200],
    "Price ($)": [150000, 165000, 170000, 180000, 185000, 190000, 200000, 210000, 215000, 230000],
}
df = pd.DataFrame(data)

X = df[['Size (sq ft)']]  # Feature (Independent variable)
y = df['Price ($)']  # Target (Dependent variable)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse:.2f}")
print(f"R-squared Score: {r2:.2f}")

plt.scatter(X, y, color='blue', label='Actual Data')

plt.plot(X, model.predict(X), color='red', label='Regression Line')
plt.title('House Price Prediction')
plt.xlabel('Size (sq ft)')
plt.ylabel('Price ($)')
plt.legend()
plt.show()

house_size = 1000
predicted_price = model.predict([[house_size]])
print(f"Predicted price for a house of size {house_size} sq ft: ${predicted_price[0]:,.2f}")
