Q.1) Find a company with a workforce greater than 30 in the array. (Using find by
id method). 


const companies = [
    { id: 1, name: "TechCorp", workforce: 25 },
    { id: 2, name: "Innovatech", workforce: 35 },
    { id: 3, name: "GreenSolutions", workforce: 15 },
    { id: 4, name: "DataDive", workforce: 50 }
];

const largeWorkforceCompany = companies.find(company => company.workforce > 30);

if (largeWorkforceCompany) {
    console.log("Company with a workforce greater than 30:", largeWorkforceCompany);
} else {
    console.log("No company found with a workforce greater than 30.");
}

(Another program)

const { MongoClient, ObjectId } = require('mongodb');

const url = 'mongodb://localhost:27017';
const dbName = 'companyDatabase';

async function findCompanyById() {
  const client = new MongoClient(url);

  try {
    await client.connect();
    console.log("Connected to the database");

    const db = client.db(dbName);
    const companies = db.collection('companies');

    const companyId = "someObjectId"; 
    const company = await companies.findById(ObjectId(companyId));

    if (company && company.workforce > 30) {
      console.log("Company with workforce greater than 30:", company);
    } else {
      console.log("No such company found or workforce is not greater than 30.");
    }
  } catch (error) {
    console.error("Error:", error);
  } finally {
    await client.close();
  }
}

findCompanyById();


Q.2) Create Express.js application to include middleware for parsing request bodies (e.g.,
JSON, form data) and validating input data. Send appropriate JSON responses for
success and error cases.

npm install express body-parser

server.js

const express = require('express');
const bodyParser = require('body-parser');

const app = express();
const PORT = 3000;

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

function validateInput(req, res, next) {
    const { username, email, age } = req.body;

    if (!username || typeof username !== 'string') {
        return res.status(400).json({ error: 'Invalid or missing "username"' });
    }

    if (!email || typeof email !== 'string' || !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
        return res.status(400).json({ error: 'Invalid or missing "email"' });
    }

    if (!age || typeof age !== 'number' || age < 0) {
        return res.status(400).json({ error: 'Invalid or missing "age"' });
    }

    next(); 
}

app.get('/', (req, res) => {
    res.json({ message: 'Welcome to the Express.js application!' });
});

app.post('/register', validateInput, (req, res) => {
    const { username, email, age } = req.body;

    res.status(200).json({
        message: 'User registered successfully!',
        user: { username, email, age }
    });
});

app.use((req, res) => {
    res.status(404).json({ error: 'Route not found' });
});

app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});
