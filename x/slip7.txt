Q7)SAD : Write a JAVA Program to implement built-in support (java.util.Observable)
Weather station with members temperature, humidity, pressure and methods -
mesurmentsChanged(),setMesurment(), getTemperature(), getHumidity(),
getPressure()

import java.util.Observable;

class WeatherData extends Observable {
    private float temperature;
    private float humidity;
    private float pressure;

    public void measurementsChanged() {
        setChanged();
        notifyObservers();
    }

    public void setMeasurements(float temperature, float humidity, float pressure) {
        this.temperature = temperature;
        this.humidity = humidity;
        this.pressure = pressure;
        measurementsChanged();
    }

    public float getTemperature() {
        return temperature;
    }

    public float getHumidity() {
        return humidity;
    }

    public float getPressure() {
        return pressure;
    }
}

class CurrentConditionsDisplay implements java.util.Observer {
    private float temperature;
    private float humidity;
    private float pressure;

    @Override
    public void update(Observable o, Object arg) {
        if (o instanceof WeatherData) {
            WeatherData weatherData = (WeatherData) o;
            this.temperature = weatherData.getTemperature();
            this.humidity = weatherData.getHumidity();
            this.pressure = weatherData.getPressure();
            display();
        }
    }

    public void display() {
        System.out.println("Current conditions: " + temperature + "°C, " + humidity + "% humidity, " + pressure + " hPa");
    }
}

public class WeatherStation {
    public static void main(String[] args) {
        WeatherData weatherData = new WeatherData();
        CurrentConditionsDisplay currentDisplay = new CurrentConditionsDisplay();
        
        weatherData.addObserver(currentDisplay);
        
        weatherData.setMeasurements(25.3f, 65f, 1013.1f);
        weatherData.setMeasurements(26.1f, 60f, 1012.5f);
        weatherData.setMeasurements(27.8f, 55f, 1011.9f);
    }
}


IoT : Programming of Raspberry Pi to detect temperature using temperature
sensor

import Adafruit_DHT
import time

sensor = Adafruit_DHT.DHT11  
gpio_pin = 4  

def read_temperature():
    humidity, temperature = Adafruit_DHT.read_retry(sensor, gpio_pin)
    if humidity is not None and temperature is not None:
        print(f"Temperature: {temperature:.1f}°C")
        print(f"Humidity: {humidity:.1f}%")
    else:
        print("Failed to retrieve data from the sensor")

while True:
    read_temperature()
    time.sleep(2)  # Wait for 2 seconds before reading again
