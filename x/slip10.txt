Q.1) Implement a simple server using Node.js.

server.js.

const http = require('http');

const server = http.createServer((req, res) => {
    res.writeHead(200, { 'Content-Type': 'text/plain' });
    
    if (req.url === '/') {
        res.end('Welcome to the Home Page!');
    } else if (req.url === '/about') {
        res.end('This is the About Page.');
    } else {
        res.end('404 Not Found');
    }
});

const PORT = 3000;

server.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});

Q.2) Extend the previous Express.js application to include middleware for parsing
request bodies (e.g., JSON, form data) and validating input data. Send appropriate JSON
responses for success and error cases. 

npm install express body-parser

server.js.

const express = require('express');
const bodyParser = require('body-parser');

const app = express();
const PORT = 3000;

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

function validateInput(req, res, next) {
    const { name, email } = req.body;

    if (!name || typeof name !== 'string') {
        return res.status(400).json({ error: 'Invalid or missing "name" field' });
    }

    if (!email || typeof email !== 'string' || !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
        return res.status(400).json({ error: 'Invalid or missing "email" field' });
    }

    next(); 
}

app.get('/', (req, res) => {
    res.json({ message: 'Welcome to the home page!' });
});

app.post('/submit', validateInput, (req, res) => {
    const { name, email } = req.body;

    res.status(200).json({
        message: 'Data received successfully',
        data: { name, email }
    });
});

app.use((req, res) => {
    res.status(404).json({ error: 'Route not found' });
});

app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});
