Q.1. Write a python program to implement k-nearest Neighbors ML algorithm to build
prediction model (Use iris Dataset).

import pandas as pd
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt

iris = load_iris()
X = iris.data 
y = iris.target  

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

knn = KNeighborsClassifier(n_neighbors=3)

knn.fit(X_train, y_train)

y_pred = knn.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy of KNN model: {accuracy * 100:.2f}%")

h = .02  # Step size in the mesh

x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
xx, yy = plt.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))

Z = knn.predict(np.c_[xx.ravel(), yy.ravel()])

Z = Z.reshape(xx.shape)

plt.figure(figsize=(8, 6))
plt.contourf(xx, yy, Z, alpha=0.4)

for i, species in enumerate(iris.target_names):
    plt.scatter(X_train[y_train == i, 0], X_train[y_train == i, 1], label=species, edgecolors='k', s=100)

plt.title("K-Nearest Neighbors - Iris Dataset")
plt.xlabel('Sepal Length (cm)')
plt.ylabel('Sepal Width (cm)')
plt.legend()
plt.show()

new_data_point = [[5.0, 3.6]] 
prediction = knn.predict(new_data_point)
print(f"Predicted class for new data point {new_data_point}: {iris.target_names[prediction][0]}")


Q.2. Fit the simple linear regression and polynomial linear regression models to
Salary_positions.csv data. Find which one is more accurately fitting to the given
data. Also predict the salaries of level 11 and level 12 employees. 

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split

data = pd.read_csv('Salary_positions.csv')

print(data.head())

X = data[['Position Level']].values  # Feature
y = data['Salary'].values  # Target

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

linear_regressor = LinearRegression()

linear_regressor.fit(X_train, y_train)

y_pred_linear = linear_regressor.predict(X_test)

mse_linear = mean_squared_error(y_test, y_pred_linear)
r2_linear = linear_regressor.score(X_test, y_test)
print(f"Linear Regression MSE: {mse_linear}")
print(f"Linear Regression R²: {r2_linear}")

poly = PolynomialFeatures(degree=4)

X_poly = poly.fit_transform(X)

poly_regressor = LinearRegression()
poly_regressor.fit(X_poly, y)

X_test_poly = poly.transform(X_test)
y_pred_poly = poly_regressor.predict(X_test_poly)

mse_poly = mean_squared_error(y_test, y_pred_poly)
r2_poly = poly_regressor.score(X_test_poly, y_test)
print(f"Polynomial Regression MSE: {mse_poly}")
print(f"Polynomial Regression R²: {r2_poly}")

plt.figure(figsize=(10, 6))
plt.scatter(X, y, color='blue', label='Actual data')
plt.plot(X, linear_regressor.predict(X), color='red', label='Linear Regression')
plt.title('Linear Regression - Salary vs Position Level')
plt.xlabel('Position Level')
plt.ylabel('Salary')
plt.legend()
plt.show()

plt.figure(figsize=(10, 6))
plt.scatter(X, y, color='blue', label='Actual data')
plt.plot(np.sort(X.flatten()), poly_regressor.predict(poly.transform(np.sort(X.flatten()).reshape(-1, 1))), color='green', label='Polynomial Regression (degree=4)')
plt.title('Polynomial Regression - Salary vs Position Level')
plt.xlabel('Position Level')
plt.ylabel('Salary')
plt.legend()
plt.show()

salary_level_11_linear = linear_regressor.predict([[11]])
salary_level_12_linear = linear_regressor.predict([[12]])

salary_level_11_poly = poly_regressor.predict(poly.transform([[11]]))
salary_level_12_poly = poly_regressor.predict(poly.transform([[12]]))

print(f"Predicted Salary for Level 11 (Linear Regression): {salary_level_11_linear[0]}")
print(f"Predicted Salary for Level 12 (Linear Regression): {salary_level_12_linear[0]}")

print(f"Predicted Salary for Level 11 (Polynomial Regression): {salary_level_11_poly[0]}")
print(f"Predicted Salary for Level 12 (Polynomial Regression): {salary_level_12_poly[0]}")
