Q2)SAD : Write a Java Program to implement Singleton pattern for multithreading.

class Singleton {
    private static volatile Singleton instance;

    private Singleton() {
        System.out.println("Singleton instance created");
    }

    public static Singleton getInstance() {
        if (instance == null) { // First check (no synchronization)
            synchronized (Singleton.class) {
                if (instance == null) { // Second check (with synchronization)
                    instance = new Singleton();
                }
            }
        }
        return instance;
    }

    public void showMessage() {
        System.out.println("Hello from Singleton!");
    }
}

public class SingletonMultithreadingDemo {
    public static void main(String[] args) {
        
        Thread thread1 = new Thread(() -> {
            Singleton instance = Singleton.getInstance();
            instance.showMessage();
        });

        Thread thread2 = new Thread(() -> {
            Singleton instance = Singleton.getInstance();
            instance.showMessage();
        });

        
        thread1.start();
        thread2.start();
    }
}


IoT : To write a program to get temperature notification using Arduino

#include <DHT.h>

#define DHTPIN 2 // Pin connected to DHT sensor
#define DHTTYPE DHT11 // Change to DHT22 if using DHT22

DHT dht(DHTPIN, DHTTYPE);

const float TEMP_THRESHOLD = 30.0;

const int ALERT_PIN = 13;

void setup() {
  Serial.begin(9600);

  dht.begin();

  pinMode(ALERT_PIN, OUTPUT);

  digitalWrite(ALERT_PIN, LOW);

  Serial.println("Temperature Notification System Initialized.");
}

void loop() {
  float temperature = dht.readTemperature();

  if (isnan(temperature)) {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }

  Serial.print("Temperature: ");
  Serial.print(temperature);
  Serial.println(" Â°C");

  if (temperature > TEMP_THRESHOLD) {
    Serial.println("ALERT: Temperature is above threshold!");
    digitalWrite(ALERT_PIN, HIGH); // Turn on LED or buzzer
  } else {
    digitalWrite(ALERT_PIN, LOW); // Turn off LED or buzzer
  }

  delay(2000);
}
