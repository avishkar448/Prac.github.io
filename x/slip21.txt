Q.1. Create a multiple linear regression model for house price dataset divide dataset into
train and test data while giving it to model and predict prices of house. 

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

data = pd.read_csv('housing_data.csv')

print(data.head())

data = pd.get_dummies(data, drop_first=True)  # Assuming 'Location' is a categorical column

X = data.drop('Price', axis=1)  # Features (all columns except 'Price')
y = data['Price']  # Target (Price)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

model = LinearRegression()

model.fit(X_train, y_train)

y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error (MSE): {mse}")

r2_score = model.score(X_test, y_test)
print(f"RÂ² Score: {r2_score}")

plt.scatter(y_test, y_pred)
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual vs Predicted House Prices')
plt.show()

new_data = np.array([[1500, 3, 2, 1]])  # Example: 1500 sq ft, 3 bedrooms, 2 bathrooms, 1 location
new_price_prediction = model.predict(new_data)
print(f"Predicted price for the house: ${new_price_prediction[0]:,.2f}")

Q.2. Write a python program to implement Linear SVM using UniversalBank.csv.

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import classification_report, accuracy_score
from sklearn.preprocessing import StandardScaler

data = pd.read_csv('UniversalBank.csv')

print(data.head())

data = data.drop(['ID', 'ZIPCode'], axis=1)  # Adjust based on your dataset

print(data.isnull().sum())  # Handle missing values if necessary (e.g., by filling or dropping rows)

X = data.drop('PersonalLoan', axis=1)  # Features
y = data['PersonalLoan']  # Target

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

model = SVC(kernel='linear', random_state=42)

model.fit(X_train_scaled, y_train)

y_pred = model.predict(X_test_scaled)

print("Accuracy Score:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))


new_customer = [[45, 20, 120, 10, 0, 1, 0, 1, 0]]  # Example customer data
new_customer_scaled = scaler.transform(new_customer)  # Scale the features
new_prediction = model.predict(new_customer_scaled)

print(f"Prediction for new customer (0 = No Loan, 1 = Loan): {new_prediction[0]}")


