Q4)SAD : Write a Java Program to implement undo command to test Ceilingfan.

interface Command {
    void execute();
    void undo();
}

class CeilingFan {
    public static final int OFF = 0;
    public static final int LOW = 1;
    public static final int MEDIUM = 2;
    public static final int HIGH = 3;

    private String location;
    private int speed;

    public CeilingFan(String location) {
        this.location = location;
        this.speed = OFF;
    }

    public void setSpeed(int speed) {
        this.speed = speed;
        switch (speed) {
            case HIGH:
                System.out.println(location + " Ceiling Fan is set to HIGH.");
                break;
            case MEDIUM:
                System.out.println(location + " Ceiling Fan is set to MEDIUM.");
                break;
            case LOW:
                System.out.println(location + " Ceiling Fan is set to LOW.");
                break;
            case OFF:
                System.out.println(location + " Ceiling Fan is OFF.");
                break;
        }
    }

    public int getSpeed() {
        return speed;
    }
}

class CeilingFanHighCommand implements Command {
    private CeilingFan ceilingFan;
    private int previousSpeed;

    public CeilingFanHighCommand(CeilingFan ceilingFan) {
        this.ceilingFan = ceilingFan;
    }

    @Override
    public void execute() {
        previousSpeed = ceilingFan.getSpeed();
        ceilingFan.setSpeed(CeilingFan.HIGH);
    }

    @Override
    public void undo() {
        ceilingFan.setSpeed(previousSpeed);
    }
}

class CeilingFanMediumCommand implements Command {
    private CeilingFan ceilingFan;
    private int previousSpeed;

    public CeilingFanMediumCommand(CeilingFan ceilingFan) {
        this.ceilingFan = ceilingFan;
    }

    @Override
    public void execute() {
        previousSpeed = ceilingFan.getSpeed();
        ceilingFan.setSpeed(CeilingFan.MEDIUM);
    }

    @Override
    public void undo() {
        ceilingFan.setSpeed(previousSpeed);
    }
}

class CeilingFanOffCommand implements Command {
    private CeilingFan ceilingFan;
    private int previousSpeed;

    public CeilingFanOffCommand(CeilingFan ceilingFan) {
        this.ceilingFan = ceilingFan;
    }

    @Override
    public void execute() {
        previousSpeed = ceilingFan.getSpeed();
        ceilingFan.setSpeed(CeilingFan.OFF);
    }

    @Override
    public void undo() {
        ceilingFan.setSpeed(previousSpeed);
    }
}

class RemoteControl {
    private Command[] onCommands;
    private Command lastCommand;

    public RemoteControl() {
        onCommands = new Command[3];
        Command noCommand = new NoCommand();
        for (int i = 0; i < 3; i++) {
            onCommands[i] = noCommand;
        }
        lastCommand = noCommand;
    }

    public void setCommand(int slot, Command onCommand) {
        onCommands[slot] = onCommand;
    }

    public void pressButton(int slot) {
        onCommands[slot].execute();
        lastCommand = onCommands[slot];
    }

    public void pressUndo() {
        System.out.println("Undoing last action:");
        lastCommand.undo();
    }
}

class NoCommand implements Command {
    @Override
    public void execute() {
        System.out.println("No command assigned.");
    }

    @Override
    public void undo() {
        System.out.println("No command to undo.");
    }
}

public class CeilingFanTest {
    public static void main(String[] args) {
        RemoteControl remote = new RemoteControl();
        CeilingFan livingRoomFan = new CeilingFan("Living Room");
        CeilingFanHighCommand fanHigh = new CeilingFanHighCommand(livingRoomFan);
        CeilingFanMediumCommand fanMedium = new CeilingFanMediumCommand(livingRoomFan);
        CeilingFanOffCommand fanOff = new CeilingFanOffCommand(livingRoomFan);
        remote.setCommand(0, fanHigh);
        remote.setCommand(1, fanMedium);
        remote.setCommand(2, fanOff);
        System.out.println("Testing Ceiling Fan Control:");
        remote.pressButton(0);
        remote.pressButton(1);
        remote.pressUndo();
        remote.pressButton(2);
        remote.pressUndo();
    }
}


IoT : Programming of Raspberry Pi to get feedback from a switch connected to the
GPIO pins.

import RPi.GPIO as GPIO
import time

SWITCH_PIN = 17  

GPIO.setmode(GPIO.BCM)  
GPIO.setup(SWITCH_PIN, GPIO.IN, pull_up_down=GPIO.PUD_UP)  

def switch_callback(channel):
    if GPIO.input(SWITCH_PIN) == GPIO.LOW:
        print("Switch is PRESSED.")
    else:
        print("Switch is RELEASED.")

GPIO.add_event_detect(SWITCH_PIN, GPIO.BOTH, callback=switch_callback, bouncetime=200)

print("Press the switch to see feedback. Press Ctrl+C to exit.")

try:
    while True:
        time.sleep(0.1)  
except KeyboardInterrupt:
    print("\nExiting program.")

finally:
    GPIO.cleanup()  
