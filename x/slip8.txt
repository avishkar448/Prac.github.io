Q.1) Create a simple Angular application that fetches data from an API using HttpClient.
Implement an Observable to fetch data from an API endpoint.

npm install -g @angular/cli
ng new angular-http-example
cd angular-http-example

src/app/app.module.ts, add the following imports

import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { HttpClientModule } from '@angular/common/http'; // <-- Add this line

import { AppComponent } from './app.component';

@NgModule({
  declarations: [AppComponent],
  imports: [BrowserModule, HttpClientModule], // <-- Add HttpClientModule here
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule {}

cmd-> ng generate service api

src/app/api.service.ts->

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class ApiService {
  private apiUrl = 'https://jsonplaceholder.typicode.com/posts'; // Example API endpoint

  constructor(private http: HttpClient) {}

  // Method to fetch data from API
  getData(): Observable<any> {
    return this.http.get(this.apiUrl);
  }
}

src/app/app.component.ts -> 

import { Component, OnInit } from '@angular/core';
import { ApiService } from './api.service'; // Import ApiService

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent implements OnInit {
  posts: any[] = []; // Array to hold posts data

  constructor(private apiService: ApiService) {}

  ngOnInit(): void {
    // Subscribe to the observable from the service to fetch data
    this.apiService.getData().subscribe((data: any) => {
      this.posts = data; // Store the fetched data in posts
    });
  }
}


src/app/app.component.html ->

<div *ngIf="posts.length > 0; else loading">
  <h2>Posts</h2>
  <ul>
    <li *ngFor="let post of posts">
      <h3>{{ post.title }}</h3>
      <p>{{ post.body }}</p>
    </li>
  </ul>
</div>

<ng-template #loading>
  <p>Loading...</p>
</ng-template>


ng serve

Q.2) Develop an Express.js application that defines routes for Create, Update operations
on a resource (Employee)

npm install express body-parser

server.js

const express = require('express');
const bodyParser = require('body-parser');

const app = express();
const port = 3000;

app.use(bodyParser.json());

let employees = [];

app.post('/employees', (req, res) => {
  const { name, position, salary } = req.body;

  
  if (!name || !position || !salary) {
    return res.status(400).send('Name, position, and salary are required');
  }

  const newEmployee = {
    id: employees.length + 1,
    name,
    position,
    salary
  };

  employees.push(newEmployee);
  res.status(201).send(newEmployee);
});


app.put('/employees/:id', (req, res) => {
  const { id } = req.params;
  const { name, position, salary } = req.body;

 
  const employee = employees.find(emp => emp.id === parseInt(id));

  if (!employee) {
    return res.status(404).send('Employee not found');
  }

  
  if (name) employee.name = name;
  if (position) employee.position = position;
  if (salary) employee.salary = salary;

  res.status(200).send(employee);
});


app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});
