Q.1. Write a python program to categorize the given news text into one of the available 20
categories of news groups, using multinomial Na√Øve Bayes machine learning model

import numpy as np
from sklearn.datasets import fetch_20newsgroups
from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import classification_report, accuracy_score

categories = None  # Use all 20 categories
newsgroups = fetch_20newsgroups(subset='all', categories=categories, shuffle=True, random_state=42)

print("Categories:\n", newsgroups.target_names)
print(f"Number of documents: {len(newsgroups.data)}")

X_train, X_test, y_train, y_test = train_test_split(newsgroups.data, newsgroups.target, test_size=0.3, random_state=42)

vectorizer = CountVectorizer(stop_words='english', max_features=10000)
tfidf_transformer = TfidfTransformer()

X_train_counts = vectorizer.fit_transform(X_train)
X_train_tfidf = tfidf_transformer.fit_transform(X_train_counts)

X_test_counts = vectorizer.transform(X_test)
X_test_tfidf = tfidf_transformer.transform(X_test_counts)

model = MultinomialNB()
model.fit(X_train_tfidf, y_train)

y_pred = model.predict(X_test_tfidf)
accuracy = accuracy_score(y_test, y_pred)

print(f"\nModel Accuracy: {accuracy * 100:.2f}%")
print("\nClassification Report:")
print(classification_report(y_test, y_pred, target_names=newsgroups.target_names))

new_text = [
    "The game was intense, and the players performed exceptionally well.",
    "NASA's latest rover has successfully landed on Mars.",
    "The stock market saw a significant downturn last week."
]
new_text_counts = vectorizer.transform(new_text)
new_text_tfidf = tfidf_transformer.transform(new_text_counts)
predicted_categories = model.predict(new_text_tfidf)

print("\nPredictions for new text:")
for text, category in zip(new_text, predicted_categories):
    print(f"Text: {text}\nPredicted Category: {newsgroups.target_names[category]}\n")


Q.2. Write a python program to implement Decision Tree whether or not to play Tennis.

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier, export_text, plot_tree
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt

data = {
    'Outlook': ['Sunny', 'Sunny', 'Overcast', 'Rain', 'Rain', 'Rain', 'Overcast', 'Sunny', 'Sunny', 'Rain', 'Sunny', 'Overcast', 'Overcast', 'Rain'],
    'Temperature': ['Hot', 'Hot', 'Hot', 'Mild', 'Cool', 'Cool', 'Cool', 'Mild', 'Cool', 'Mild', 'Mild', 'Mild', 'Hot', 'Mild'],
    'Humidity': ['High', 'High', 'High', 'High', 'Normal', 'Normal', 'Normal', 'High', 'Normal', 'Normal', 'Normal', 'High', 'Normal', 'High'],
    'Windy': [False, True, False, False, False, True, True, False, False, False, True, True, False, True],
    'Play': ['No', 'No', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'No', 'Yes', 'Yes', 'Yes', 'Yes', 'Yes', 'No']
}

df = pd.DataFrame(data)

df_encoded = pd.get_dummies(df, columns=['Outlook', 'Temperature', 'Humidity', 'Windy'], drop_first=True)

X = df_encoded.drop('Play', axis=1)
y = df['Play']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

model = DecisionTreeClassifier(criterion='entropy', random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy * 100:.2f}%")

print("\nDecision Tree Structure:")
tree_rules = export_text(model, feature_names=list(X.columns))
print(tree_rules)

plt.figure(figsize=(12, 8))
plot_tree(model, feature_names=list(X.columns), class_names=model.classes_, filled=True)
plt.title("Decision Tree for Playing Tennis")
plt.show()

new_sample = pd.DataFrame({
    'Outlook_Overcast': [0],
    'Outlook_Rain': [1],
    'Temperature_Mild': [1],
    'Temperature_Hot': [0],
    'Humidity_Normal': [1],
    'Windy_True': [0]
})

prediction = model.predict(new_sample)
print(f"Prediction for new sample: {prediction[0]}")
